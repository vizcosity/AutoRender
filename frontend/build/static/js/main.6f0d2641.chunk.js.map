{"version":3,"sources":["Landing.js","AutoRenderAPI.js","NewRenderJob.js","ManageJobs.js","Footer.js","Log.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","Box","margin","vertical","direction","justify","left","right","padding","borderRadius","Button","to","color","primary","hoverIndicator","icon","Add","label","as","Link","List","Landing","flex","align","fill","Heading","level","encodeGetParams","p","Object","entries","map","kv","encodeURIComponent","join","cancelOrDeleteJob","id","a","fetch","method","body","JSON","stringify","headers","getLogs","lines","result","json","resultJSON","console","log","FormHeader","style","maxWidth","display","alignItems","marginRight","opacity","NewRenderJob","props","context","state","submitting","postSubmission","onSubmitHandler","bind","e","this","setState","jobDetails","formValues","value","target","i","length","input","files","name","truncateBuffers","Promise","resolve","reject","formData","FormData","keys","forEach","field","append","then","response","success","job","Fragment","Validate","Text","href","size","Form","onSubmit","FormField","required","placeholder","help","htmlFor","type","Component","statusColourMap","completed","rendering","failed","pending","JobsTable","pad","DataTable","columns","data","ManageJobs","jobs","fetchJobs","property","header","render","item","key","weight","artistName","status","progress","disabled","Download","onClick","cancelOrDeleteJobHandler","Halt","Trash","window","confirm","ops","details","Footer","marginTop","top","background","center","Anchor","LogContainer","logs","className","Paragraph","Log","fetchAndDisplayLogs","setInterval","replace","split","reverse","App","Grommet","theme","grommet","plain","full","minHeight","exact","path","component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f0d2641.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Grommet,\n  Box,\n  Heading,\n  Button\n} from 'grommet';\nimport { Add, List } from 'grommet-icons';\nimport { Link } from 'react-router-dom';\n\n// Stylingn.\nimport './App.css';\n\n\n\nconst AppBar = (props) => <Box\n  tag='header'\n  direction='row'\n  align='center'\n  justify='between'\n  background='brand'\n  pad={{left: 'medium', right: 'small', vertical: 'large'}}\n  style={{ zIndex: '1' }}\n{...props}\n/>\n\n\nconst Buttons = () =>\n<Box\n  margin={{vertical: 'small'}}\n  direction='row'\n  justify='center'\n  margin={{left: 'auto', right: 'auto', vertical: 'medium'}}\n  style={{padding: '50px', borderRadius: '20px'}}\n>\n  <Button to=\"/newRenderJob\" margin='10px' color='dark-1' primary hoverIndicator={true} icon={<Add />} label=\"New Render Job\" as={Link}></Button>\n  <Button to=\"/manageJobs\" margin='10px'color='dark-2' hoverIndicator={true} icon={<List />} label=\"Manage Jobs\" as={Link}></Button>\n</Box>\n\nconst Landing = () =>\n<Box\n  flex\n  justify='center'\n  align='center'\n  fill='vertical'\n>\n  <Heading level='1' margin='0' color='gray'>AutoRender</Heading>\n  <Buttons />\n</Box>\n\nexport default Landing;\n","// REF: https://stackoverflow.com/questions/8135132/how-to-encode-url-parameters\nconst encodeGetParams = p =>\n  p ? '?' + Object.entries(p).map(kv => kv.map(encodeURIComponent).join(\"=\")).join(\"&\") : \"\";\n\nconst enqueueJob = (jobDetails) => new Promise((resolve, reject) => {\n\n  var formData = new FormData();\n\n  Object.keys(jobDetails).forEach(field => {\n    formData.append(field, jobDetails[field]);\n  })\n\n  fetch('/api/v1/queueJob', {\n    method: 'POST',\n    body: formData\n  })\n  .then(response => {\n      try {\n        return response.json();\n      } catch(e) {\n        reject(e);\n      }\n  })\n  .then(response => resolve(response));\n\n});\n\nconst getJobs = ops => new Promise((resolve, reject) => {\n\n  fetch('/api/v1/jobs'+encodeGetParams(ops), {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n  .then(response => {\n      try {\n        return response.json();\n      } catch(e) {\n        reject(e);\n      }\n  })\n  .then(response => resolve(response));\n\n});\n\nconst getJobDetail = ops => new Promise((resolve, reject) => {\n\n  fetch('/api/v1/jobDetail'+encodeGetParams(ops), {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n  .then(response => {\n      try {\n        return response.json();\n      } catch(e) {\n        reject(e);\n      }\n  })\n  .then(response => resolve(response));\n\n});\n\n// This should automatically trigger a download.\nconst downloadJobResult = ops => {\n\n  fetch('/api/v1/jobDetail'+encodeGetParams(ops), {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n}\n\nconst cancelOrDeleteJob = async id => {\n  return await fetch('/api/v1/job', {\n    method: 'DELETE',\n    body: JSON.stringify({\n      id\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nconst getLogs = async lines => {\n  try {\n    let result = await fetch('/api/v1/logs?lines='+lines, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    let resultJSON = await result.json();\n    console.log('Fetched logs:', resultJSON);\n    return resultJSON.log;\n  } catch(e){\n    return \"Could not load logs. AutoRender API is probably down.\";\n  }\n}\n\nexport {\n  enqueueJob,\n  getJobs,\n  getJobDetail,\n  getLogs,\n  downloadJobResult,\n  cancelOrDeleteJob\n}\n","import React, { Component } from 'react';\nimport {\n  Box,\n  Heading,\n  Form,\n  FormField,\n  Button,\n  Anchor,\n  Text\n} from 'grommet';\nimport { Fade } from 'react-reveal';\nimport { Add } from 'grommet-icons';\nimport { ScaleLoader } from 'react-spinners';\nimport { enqueueJob } from './AutoRenderAPI';\nimport { Validate } from 'grommet-icons';\n\nconst FormHeader = () => <Box\n  style={{\n    maxWidth:'500px'\n  }}\n  margin={{vertical: 'medium'}}\n  fill='horizontal'\n  justify='center'\n>\n  <Heading style={{\n    display: 'flex',\n    alignItems: 'center'\n  }} color='dark-2' level='3'><Add style={{marginRight: '10px', opacity: '0.6'}} />Add a new Render Job</Heading>\n  <Heading color='dark-3' margin='none' level='4'>Make sure everything is correct or else you'll waste a few hours yo</Heading>\n</Box>\n\nexport default class NewRenderJob extends Component {\n\n  constructor(props, context){\n    super(props, context);\n\n    this.state = {\n      submitting: false,\n      postSubmission: null\n    }\n\n    this.onSubmitHandler = this.onSubmitHandler.bind(this);\n  }\n\n  onSubmitHandler(e){\n\n    this.setState({\n      ...this.state,\n      submitting: true,\n    }, () => {\n      var formValues = {\n        ...e.value\n      };\n\n      console.log(e.target);\n\n\n      // Grab all of the files and attatch them to the formValues object.\n      for (var i = 0; i < e.target.length; i++){\n      var input = e.target[i];\n        if (input.files){\n          console.log(input, input.files);\n          formValues[input.name] = input.files[0]\n        }\n      }\n\n      enqueueJob({\n        ...formValues,\n        truncateBuffers:  true\n      })\n      .then(result => {\n      if (result.success)\n          this.setState({\n            ...this.state,\n            postSubmission: result.job.id\n          });\n      });\n\n    });\n  }\n\n  render(){\n    return (\n      <Box flex margin={{vertical: 'medium'}} align='center' justify='center'>\n      <FormHeader />\n        <Box\n          fill='horizontal'\n          margin={{vertical: 'large'}}\n          style={{maxWidth: '500px'}}\n        >\n        {\n          !this.state.submitting ?\n            <Form onSubmit={this.onSubmitHandler}>\n              <Heading level='3'>Song Details</Heading>\n\n              <FormField required name=\"artistName\" label=\"Artist Name\" placeholder=\"Porter Robinson\"/>\n              <FormField required name=\"songName\" label=\"Song Name\" placeholder=\"Sad Machine\"/>\n              <FormField required name=\"genre\" label=\"Genre\" placeholder=\"Electronic\" value=\"Electronic\"/>\n              <FormField required name=\"visualizerColour\" label=\"Visualizer Colour\" help=\"Must be a valid hex value e.g. #FFEA32\" htmlFor=\"test\" />\n\n              <Heading level='3'>Files</Heading>\n\n              <FormField required name=\"backgroundFile\" label=\"Background Image\" type=\"file\" />\n              <FormField  name=\"songFile\" label=\"Song File\" type=\"file\" />\n              <FormField  name=\"artworkFile\" label=\"Artwork Image\" type=\"file\" />\n\n\n              <Button type=\"submit\" primary color='dark-1' label=\"Submit\" />\n            </Form> :\n              <Fade>\n                <Box align='center' direction='column'>\n                  {\n                    !this.state.postSubmission ?\n                    <React.Fragment>\n                      <ScaleLoader\n                        size='large'\n                        color=\"#555555\"\n                      />\n                      <Text color='dark-2'>Queuing up...</Text>\n                    </React.Fragment> :\n                    <React.Fragment>\n                      <Validate color='status-ok'/>\n                      <Text\n                        margin={{vertical: 'small'}}\n                        color='status-ok'\n                      >Queued {this.state.postSubmission}</Text>\n                      <Button\n                        margin={{vertical : 'large' }}\n                        label=\"View Jobs\"\n                        color='dark-1'\n                        as='a'\n                        href='/manageJobs'\n                        primary\n                      />\n                    </React.Fragment>\n                  }\n\n              </Box>\n              </Fade>\n\n        }\n\n        </Box>\n      </Box>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  getJobs,\n  downloadJobResult,\n  cancelOrDeleteJob\n} from './AutoRenderAPI';\nimport { Fade } from 'react-reveal';\nimport {\n  Download,\n  Halt,\n  Trash\n} from 'grommet-icons';\nimport {\n  Grommet,\n  Box,\n  Button,\n  DataTable,\n  Meter,\n  Text,\n  CheckBox,\n  Anchor,\n  Heading\n} from \"grommet\";\nimport { ScaleLoader } from 'react-spinners';\n\nconst statusColourMap = {\n  completed: 'status-ok',\n  rendering: 'status-warning',\n  failed: 'status-error',\n  pending: 'status-unknown'\n};\n\nclass JobsTable extends Component {\n  render() {\n    return (\n        <Box align=\"center\" pad=\"large\">\n          <DataTable\n            columns={this.props.columns}\n            data={this.props.data}\n          />\n        </Box>\n    );\n  }\n}\n\nexport default class ManageJobs extends Component {\n\n  constructor(props, context){\n    super(props, context);\n\n    this.state = {\n      jobs: null\n    };\n\n\n    this.fetchJobs();\n\n    this.columns = [\n      {\n        property: \"key\",\n        header: \"#\",\n        render: item => <Text>{item.key}</Text>\n      }, {\n        property: \"artistName\",\n        header: \"Artist\",\n        render: item => <Text weight=\"bold\">{item.artistName}</Text>\n      },\n      {\n        property: \"songName\",\n        header: \"Song\"\n      },\n      {\n        property: \"status\",\n        header: \"Status\",\n        render: item => {\n          return <Text color={statusColourMap[item.status]}>{item.status}</Text>\n        }\n      },\n      {\n        property: \"progress\",\n        header: \"Progress\",\n        render: item => {\n          return <Text color={'status-unknown'}>{`${item.progress}%`}</Text>\n        }\n      },\n      {\n        property: \"download\",\n        header: \"Download\",\n        align: \"center\",\n        render: item =>\n          <Button\n            style={{\n              padding: '5px',\n              borderRadius: '5px'\n            }}\n            hoverIndicator={true}\n            as=\"a\"\n            href={item.status === 'completed' ? `/api/v1/jobResult?id=${item.id}` : null}\n            disabled={item.status !== 'completed'}\n          >\n            <Download />\n          </Button>\n      },\n      {\n        property: \"clean\",\n        header: \"Clean\",\n        align: \"center\",\n        render: item =>\n          <Button\n            style={{\n              padding: '5px',\n              borderRadius: '5px'\n            }}\n            hoverIndicator={true}\n            as=\"a\"\n            onClick={() => this.cancelOrDeleteJobHandler(item)}\n            // href={item.status === 'completed' ? `/api/v1/jobResult?id=${item.id}` : null}\n          >\n            {\n              item.status === 'rendering' ? <Halt />\n              : <Trash />\n            }\n          </Button>\n      }\n    ]\n\n  }\n\n  async cancelOrDeleteJobHandler(item){\n    if (!window.confirm(\"This will cancel the job. Are you sure?\")) return;\n\n    let result = await cancelOrDeleteJob(item.id);\n\n    if (result.success) console.log(`Successfully deleted ${item.id}`)\n\n    this.fetchJobs();\n  }\n\n  fetchJobs(){\n    getJobs({truncateBuffers: true}).then(result => this.setState({\n      ...this.state,\n      jobs: result.jobs\n    }));\n  }\n\n  render(){\n    console.log(this.state.jobs);\n    return (\n      <Box pad='large' align='center'>\n      <Box margin={{vertical: 'large'}}>\n        <Heading margin='none' color='dark-1' level=\"1\" size=\"small\">\n          What's cooking, b0ss?\n        </Heading>\n        <Heading color='dark-2' margin='none' level=\"2\" size=\"xsmall\">\n          View all the jobs below. Cooked, pending, or spoilt.\n        </Heading>\n      </Box>\n        {\n          this.state.jobs ? <Fade><JobsTable\n            data={this.state.jobs.map((item, i) => Object({\n              ...item,\n              ...item.details,\n              key: i\n            }))}\n            columns={this.columns}\n          /></Fade> : <Text>Loading...</Text>\n        }\n\n      </Box>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Box, Heading, Anchor } from 'grommet';\n\nexport default class Footer extends Component {\n\n  render(){\n    return (\n      <Box\n          style={{\n            padding: '25px',\n            marginTop: 'auto'\n          }}\n          margin={{ top: 'auto' }}\n          color='dark-1'\n          background='dark-1'\n          fill='horizontal'\n          align='center'\n          as='footer'\n        >\n        <Heading center level='3' size='xsmall'>Video rendering automation made with ☕️ & ❤️ by <Anchor href=\"http://aaronbaw.com/\" label=\"Aaron\" /></Heading>\n      </Box>\n    );\n  }\n}\n","/**\n * Log Component for react.\n */\n\nimport React, { Component } from 'react';\nimport { Paragraph, Heading } from 'grommet';\nimport { getLogs } from './AutoRenderAPI';\n\nconst LogContainer = ({logs}) => <div className=\"log-container\">\n  {\n    logs.map(log =>\n      <Paragraph\n      style={{maxWidth: 'unset'}}\n      color=\"dark-2\"\n      size=\"small\">{log}\n      </Paragraph>)\n  }\n</div>\n\nexport default class Log extends Component {\n\n  constructor(props, context){\n    super(props, context);\n\n    this.state = {\n      logs: \"Loading...\"\n    }\n\n    this.fetchAndDisplayLogs = this.fetchAndDisplayLogs.bind(this);\n\n    this.fetchAndDisplayLogs();\n    // Set a recurring job to fetch the logs and display them.\n    setInterval(this.fetchAndDisplayLogs, 2000);\n\n  }\n\n  fetchAndDisplayLogs(){\n    getLogs().then(logs => {\n      this.setState({...this.state, logs: logs.replace(/info: /g, '')})\n    });\n  }\n\n  render(){\n    return (\n      <div className=\"log-and-text-container\">\n      <Heading color='dark-3'>Logs</Heading>\n      <LogContainer\n        logs={this.state.logs.split('\\n').reverse()}\n      />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Grommet, Box } from 'grommet';\nimport Landing from './Landing';\nimport NewRenderJob from './NewRenderJob';\nimport ManageJobs from './ManageJobs';\nimport Footer from './Footer';\nimport Log from './Log';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport { grommet } from 'grommet/themes';\n\n// Stylingn.\nimport './App.css';\n\nconst theme = {\n  global: {\n   colors: {\n     brand: 'white',\n   },\n    font: {\n      family: 'Open Sans ',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nfunction App() {\n  return (\n    <Grommet theme={grommet} plain full>\n    <Box\n      className=\"app-container\"\n      style={{\n        minHeight: '100%'\n      }}\n    >\n      <Router>\n        <Route exact path=\"/\" component={() => <Landing />} />\n        <Route exact path=\"/newRenderJob\" component={() => <NewRenderJob />} />\n        <Route exact path=\"/manageJobs\" component={() => <ManageJobs />} />\n      </Router>\n      <Log />\n      <Footer />\n    </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}